ARG POSTHOG_HOST=https://app.posthog.com
ARG POSTHOG_API_KEY=posthog-api-key
ARG INTERCOM_ID=intercom-id
ARG CAPTCHA_SITE_KEY=captcha-site-key

# Use slim image for glibc compatibility (required for @infisical/quic native modules)
FROM node:20-slim AS base

# Frontend build stage
FROM base AS frontend-builder
WORKDIR /app

# Copy package files and install dependencies
COPY frontend/package.json frontend/package-lock.json ./
RUN npm ci --only-production --ignore-scripts && npm cache clean --force

# Copy source and build
COPY frontend/ .
ENV NODE_ENV=production
ARG POSTHOG_HOST
ENV VITE_POSTHOG_HOST=$POSTHOG_HOST
ARG POSTHOG_API_KEY
ENV VITE_POSTHOG_API_KEY=$POSTHOG_API_KEY
ARG INTERCOM_ID
ENV VITE_INTERCOM_ID=$INTERCOM_ID
ARG INFISICAL_PLATFORM_VERSION
ENV VITE_INFISICAL_PLATFORM_VERSION=$INFISICAL_PLATFORM_VERSION
ARG CAPTCHA_SITE_KEY
ENV VITE_CAPTCHA_SITE_KEY=$CAPTCHA_SITE_KEY

RUN npm run build

# Backend build stage
FROM base AS backend-builder
WORKDIR /app

# Install build dependencies
RUN apt-get update && apt-get install -y \
    python3 \
    make \
    g++ \
    unixodbc-dev \
    freetds-dev \
    libc-dev

# Copy package files and install dependencies
COPY backend/package*.json ./
RUN npm ci --only-production && npm cache clean --force

# Copy source code and build
COPY backend/ .
COPY standalone-entrypoint.sh ./
RUN npm i -D tsconfig-paths && npm run build && npm cache clean --force

# Production stage with minimal footprint
FROM node:20-slim AS production

# Install only runtime dependencies in a single layer
RUN apt-get update && apt-get install -y \
    ca-certificates \
    bash \
    curl \
    python3 \
    make \
    g++ \
    unixodbc \
    freetds-bin \
    freetds-dev \
    unixodbc-dev \
    libc-dev \
    wget \
    openssh-client \
    && rm -rf /var/lib/apt/lists/*

# Install Infisical CLI
RUN wget -q https://github.com/Infisical/infisical/releases/download/infisical-cli%2Fv0.41.2/infisical_0.41.2_linux_amd64.tar.gz \
    && tar -xzf infisical_0.41.2_linux_amd64.tar.gz \
    && mv infisical /usr/local/bin/ \
    && rm infisical_0.41.2_linux_amd64.tar.gz \
    && chmod +x /usr/local/bin/infisical

# Configure ODBC
RUN printf "[FreeTDS]\nDescription = FreeTDS Driver\nDriver = /usr/lib/x86_64-linux-gnu/odbc/libtdsodbc.so\nSetup = /usr/lib/x86_64-linux-gnu/odbc/libtdsodbc.so\nFileUsage = 1\n" > /etc/odbcinst.ini

# Setup user in single layer
RUN groupadd -g 1001 nodejs && \
    useradd -s /bin/bash -u 1001 -g nodejs -m non-root-user && \
    chown -R non-root-user:nodejs /etc/ssl/certs && \
    chmod -R u+rwx /etc/ssl/certs

# Set environment variables
ARG POSTHOG_API_KEY
ENV POSTHOG_API_KEY=$POSTHOG_API_KEY
ARG INTERCOM_ID=intercom-id
ENV INTERCOM_ID=$INTERCOM_ID
ARG CAPTCHA_SITE_KEY
ENV CAPTCHA_SITE_KEY=$CAPTCHA_SITE_KEY
ARG INFISICAL_PLATFORM_VERSION
ENV INFISICAL_PLATFORM_VERSION=$INFISICAL_PLATFORM_VERSION

ENV PORT=8080 \
    HOST=0.0.0.0 \
    HTTPS_ENABLED=false \
    NODE_ENV=production \
    STANDALONE_BUILD=true \
    STANDALONE_MODE=true \
    NODE_OPTIONS="--max-old-space-size=1024" \
    TELEMETRY_ENABLED=true

WORKDIR /backend

# Copy built artifacts from previous stages
COPY --from=backend-builder --chown=non-root-user:nodejs /app ./
COPY --from=frontend-builder --chown=non-root-user:nodejs /app/dist ./frontend-build/

EXPOSE 8080 443

USER non-root-user

CMD ["./standalone-entrypoint.sh"]
